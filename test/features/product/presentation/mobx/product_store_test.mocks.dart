// Mocks generated by Mockito 5.0.10 from annotations
// in nu_challenge/test/features/product/presentation/mobx/product_store_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nu_challenge/core/errors/failures.dart' as _i6;
import 'package:nu_challenge/core/usecases/usecase.dart' as _i8;
import 'package:nu_challenge/modules/products/domain/entities/product.dart'
    as _i7;
import 'package:nu_challenge/modules/products/domain/repositories/product_repository.dart'
    as _i2;
import 'package:nu_challenge/modules/products/domain/usecases/get_products_usescase.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeProductRepository extends _i1.Fake implements _i2.ProductRepository {
}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUseCase extends _i1.Mock
    implements _i4.GetProductsUseCase {
  MockGetProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeProductRepository()) as _i2.ProductRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Product>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Product>>>.value(
              _FakeEither<_i6.Failure, List<_i7.Product>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Product>>>);
}
