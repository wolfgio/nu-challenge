// Mocks generated by Mockito 5.0.10 from annotations
// in nu_challenge/test/features/product/data/datasources/product_remote_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:graphql/src/core/policies.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

import '../../../../mocks/adapter_mocks.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [GraphqlAdapterTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphqlAdapterTest extends _i1.Mock
    implements _i3.GraphqlAdapterTest {
  MockGraphqlAdapterTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Object?, dynamic>> runQuery(
          {String? query,
          dynamic Function(Map<String, dynamic>?)? parseData,
          Map<String, dynamic>? params,
          _i5.FetchPolicy? fetchPolicy}) =>
      (super.noSuchMethod(
              Invocation.method(#runQuery, [], {
                #query: query,
                #parseData: parseData,
                #params: params,
                #fetchPolicy: fetchPolicy
              }),
              returnValue: Future<_i2.Either<Object?, dynamic>>.value(
                  _FakeEither<Object?, dynamic>()))
          as _i4.Future<_i2.Either<Object?, dynamic>>);
  @override
  _i4.Future<_i2.Either<Object?, dynamic>> runMutation(
          {String? mutation,
          dynamic Function(Map<String, dynamic>?)? parseData,
          Map<String, dynamic>? payload,
          _i5.FetchPolicy? fetchPolicy}) =>
      (super.noSuchMethod(
              Invocation.method(#runMutation, [], {
                #mutation: mutation,
                #parseData: parseData,
                #payload: payload,
                #fetchPolicy: fetchPolicy
              }),
              returnValue: Future<_i2.Either<Object?, dynamic>>.value(
                  _FakeEither<Object?, dynamic>()))
          as _i4.Future<_i2.Either<Object?, dynamic>>);
  @override
  String toString() => super.toString();
}
